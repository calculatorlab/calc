{"version":3,"sources":["serviceWorker.ts","components/CalcDisplay/Display.tsx","components/Button/Button.tsx","components/CalcKeys/KeyPadLayout.tsx","util/classNames.ts","components/CalcKeys/SimpleKeyPad.ts","components/CalcSimple/Calc.tsx","pages/Homepage.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ButtonType","Display","className","Button","val","type","operation","console","log","KeyPadSectionLayout","layout","sectionStyle","buttons","map","n","key","uuid","display","buttonType","p","buttonStyle","d","defButtonStyle","childSections","childSectionStyle","c","KeyPadLayout","sections","s","SimpleKeyPadLayout","cbFun","number","value","Calc","Homepage","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,ICAYC,EDQGC,EARC,WACZ,OACI,yBAAKC,UAAU,kEAAf,M,kBCFIF,K,gBAAAA,E,uBAAAA,M,KAKZ,IASeG,EALV,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,IAAkD,IAA7CC,YAA6C,MAAtCL,EAAWM,UAA2B,EAAhBJ,EAAgB,EAAhBA,UAExC,OADAK,QAAQC,IAAI,6BAA+BH,GACpC,yBAAKH,UAAWA,GAAYE,ICP/BK,EAA2D,SAA3DA,EAA4D,GAE3D,IADLC,EACI,EADJA,OAEA,OACE,yBAAKR,UAAWQ,EAAOC,cACpBD,EAAOE,QAAQC,KAAI,SAACC,GAAD,OAClB,kBAAC,EAAD,CACEC,IAAKC,cACLZ,IAAKU,EAAEG,QACPZ,KAAMS,EAAEI,WACRhB,WCTRiB,EDSsCL,EAAEM,YCRxCC,EDQqDX,EAAOY,eCNxDH,GAEOE,GAGJ,MATyB,IAChCF,EACAE,KDWKX,EAAOa,cACN,yBAAKrB,UAAWQ,EAAOc,mBACpBd,EAAOa,cAAcV,KAAI,SAACY,GAAD,OACxB,kBAAChB,EAAD,CAAqBM,IAAKC,cAAQN,OAAQe,QAG5C,OAeKC,EAVoC,SAAC,GAAgB,IAAdhB,EAAa,EAAbA,OACpD,OACE,yBAAKR,UAAU,iBACZQ,EAAOiB,SAASd,KAAI,SAACe,GAAD,OACnB,kBAAC,EAAD,CAAqBb,IAAKC,cAAQN,OAAQkB,SE0DnCC,EANY,WACzB,MAAO,CACLF,SAAU,CApFL,CACLf,QAAS,CACP,CACEK,QAAS,OACTC,WAAYlB,EAAWM,UACvBwB,MAAO,WACLvB,QAAQC,IAAI,cAGhB,CACES,QAAS,IACTC,WAAYlB,EAAWM,UACvBwB,MAAO,WACLvB,QAAQC,IAAI,YAGhB,CACES,QAAS,IACTC,WAAYlB,EAAWM,UACvBwB,MAAO,WACLvB,QAAQC,IAAI,SAGhB,CACES,QAAS,IACTC,WAAYlB,EAAWM,UACvBwB,MAAO,WACLvB,QAAQC,IAAI,eAIlBc,eAAgB,2DAChBX,aAAc,QAKT,CACLC,QAAS,GACTY,kBAAmB,gBACnBD,cAAe,CACb,CACEX,QAAS,CACP,CAAEM,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,GACtD,CAAEd,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,GACtD,CAAEd,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,GACtD,CAAEd,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,GACtD,CAAEd,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,GACtD,CAAEd,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,GACtD,CAAEd,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,GACtD,CAAEd,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,GACtD,CAAEd,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,GACtD,CAAEd,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,GACtD,CAAEd,WAAYlB,EAAW+B,OAAQd,QAAS,IAAKe,MAAO,KACtD,CACEf,QAAS,KACTC,WAAYlB,EAAWM,UACvBwB,MAAO,WACLvB,QAAQC,IAAI,gBAIlBc,eAAgB,2DAChBX,aAAc,kBAEhB,CACEC,QAAS,CACP,CACEK,QAAS,IACTC,WAAYlB,EAAWM,UACvBwB,MAAO,WACLvB,QAAQC,IAAI,eAIlBc,eAAgB,wEAChBX,aAAc,aClEPsB,EATF,WACX,OACE,yBAAK/B,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMQ,OAAQmB,QCELK,EARE,WACf,OACE,yBAAKhC,UAAU,+DACX,kBAAC,EAAD,QCARiC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SRiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.4d255133.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nconst Display = () => {\r\n    return (\r\n        <div className=\"bg-gray-900 text-gray-100 px-4 py-3 w-full text-right text-4xl\">\r\n            0\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display\r\n","import React from \"react\";\r\n\r\nexport enum ButtonType {\r\n  number = \"NUMBER\",\r\n  operation = \"OPERATION\",\r\n}\r\n\r\nconst Button: React.FC<{\r\n  val: string;\r\n  type?: ButtonType;\r\n  className?: string;\r\n}> = ({ val, type = ButtonType.operation, className }) => {\r\n  console.log(\"Rendering button of type: \" + type);\r\n  return <div className={className}>{val}</div>;\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { KeyPad, KeyPadSection } from \"./KeyPad\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport Button from \"../Button/Button\";\r\nimport { chooseOneClassName } from \"../../util/classNames\";\r\n\r\nconst KeyPadSectionLayout: React.FC<{ layout: KeyPadSection }> = ({\r\n  layout,\r\n}) => {\r\n  return (\r\n    <div className={layout.sectionStyle}>\r\n      {layout.buttons.map((n) => (\r\n        <Button\r\n          key={uuid()}\r\n          val={n.display}\r\n          type={n.buttonType}\r\n          className={chooseOneClassName(n.buttonStyle, layout.defButtonStyle)}\r\n        />\r\n      ))}\r\n      {layout.childSections ? (\r\n        <div className={layout.childSectionStyle}>\r\n          {layout.childSections.map((c) => (\r\n            <KeyPadSectionLayout key={uuid()} layout={c} />\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst KeyPadLayout: React.FC<{ layout: KeyPad }> = ({ layout }) => {\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      {layout.sections.map((s) => (\r\n        <KeyPadSectionLayout key={uuid()} layout={s} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KeyPadLayout;\r\n","const classNames = (...e: string[]): string =>\r\n  e\r\n    .filter(Boolean)\r\n    .map((i) => i.trim())\r\n    .join(\" \");\r\n\r\nexport const chooseOneClassName = (\r\n  p: string | undefined,\r\n  d: string | undefined\r\n): string => {\r\n  if (p) {\r\n    return p;\r\n  } else if (d) {\r\n    return d;\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport default classNames;\r\n","import { ButtonType } from \"../Button/Button\";\r\nimport { KeyPad, KeyPadSection } from \"./KeyPad\";\r\n\r\nconst TopRow = (): KeyPadSection => {\r\n  return {\r\n    buttons: [\r\n      {\r\n        display: \"\\u00D7\",\r\n        buttonType: ButtonType.operation,\r\n        cbFun: () => {\r\n          console.log(\"multiply\");\r\n        },\r\n      },\r\n      {\r\n        display: \"/\",\r\n        buttonType: ButtonType.operation,\r\n        cbFun: () => {\r\n          console.log(\"divide\");\r\n        },\r\n      },\r\n      {\r\n        display: \"+\",\r\n        buttonType: ButtonType.operation,\r\n        cbFun: () => {\r\n          console.log(\"add\");\r\n        },\r\n      },\r\n      {\r\n        display: \"-\",\r\n        buttonType: ButtonType.operation,\r\n        cbFun: () => {\r\n          console.log(\"subtract\");\r\n        },\r\n      },\r\n    ],\r\n    defButtonStyle: \"px-4 py-3 border border-gray-900 w-1/4 block text-center\",\r\n    sectionStyle: \"flex\",\r\n  };\r\n};\r\n\r\nconst NumberPadSection = (): KeyPadSection => {\r\n  return {\r\n    buttons: [],\r\n    childSectionStyle: \"flex flex-row\",\r\n    childSections: [\r\n      {\r\n        buttons: [\r\n          { buttonType: ButtonType.number, display: \"1\", value: 1 },\r\n          { buttonType: ButtonType.number, display: \"2\", value: 2 },\r\n          { buttonType: ButtonType.number, display: \"3\", value: 3 },\r\n          { buttonType: ButtonType.number, display: \"4\", value: 4 },\r\n          { buttonType: ButtonType.number, display: \"5\", value: 5 },\r\n          { buttonType: ButtonType.number, display: \"6\", value: 6 },\r\n          { buttonType: ButtonType.number, display: \"7\", value: 7 },\r\n          { buttonType: ButtonType.number, display: \"8\", value: 8 },\r\n          { buttonType: ButtonType.number, display: \"9\", value: 9 },\r\n          { buttonType: ButtonType.number, display: \"0\", value: 0 },\r\n          { buttonType: ButtonType.number, display: \".\", value: \".\" },\r\n          {\r\n            display: \"AC\",\r\n            buttonType: ButtonType.operation,\r\n            cbFun: () => {\r\n              console.log(\"clear all\");\r\n            },\r\n          },\r\n        ],\r\n        defButtonStyle: \"px-4 py-3 border border-gray-900 w-1/4 block text-center\",\r\n        sectionStyle: \"flex flex-wrap\"\r\n      },\r\n      {\r\n        buttons: [\r\n          {\r\n            display: \"=\",\r\n            buttonType: ButtonType.operation,\r\n            cbFun: () => {\r\n              console.log(\"equal to\");\r\n            },\r\n          },\r\n        ],\r\n        defButtonStyle: \"px-4 py-3 border text-center border-gray-900 w-full block text-center\",\r\n        sectionStyle: \"flex\"\r\n      },\r\n    ],\r\n  };\r\n};\r\n\r\nconst SimpleKeyPadLayout = (): KeyPad => {\r\n  return {\r\n    sections: [TopRow(), NumberPadSection()],\r\n  };\r\n};\r\n\r\nexport default SimpleKeyPadLayout;\r\n","import React from \"react\";\r\nimport Display from \"../CalcDisplay/Display\";\r\nimport Keys from \"../CalcKeys/KeyPadLayout\";\r\nimport SimpleKeyPadLayout from \"../CalcKeys/SimpleKeyPad\";\r\n\r\nconst Calc = () => {\r\n  return (\r\n    <div className=\"shadow-lg w-64\">\r\n      <Display />\r\n      <Keys layout={SimpleKeyPadLayout()} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calc;\r\n","import React from \"react\";\r\nimport Calc from \"../components/CalcSimple/Calc\";\r\n\r\nconst Homepage = () => {\r\n  return (\r\n    <div className=\"flex justify-center items-center min-h-screen bg-purple-300\">\r\n        <Calc />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './build/css/main.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Homepage from './pages/Homepage';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Homepage />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}